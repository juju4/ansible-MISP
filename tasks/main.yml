---

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
## must be last to override previous vars
- name: Include webserver+distribution-specific variables
  include_vars: "{{ misp_webserver }}-{{ ansible_distribution }}.yml"

- include: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: redhat.yml
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- debug: var=misp_webserver
- include: nginx.yml
  when: misp_webserver is defined and misp_webserver == 'nginx'

- name: Ensure Random source is configured
  lineinfile:
    dest: /etc/default/rng-tools
    regexp: '^HRNGDEVICE=.*'
    line: 'HRNGDEVICE=/dev/urandom'
    backup: yes
  notify:
    - restart rng-tools
  when: ansible_os_family == "Debian"

- name: Ensure services are enabled and started
  service: "name={{ item }} state=started enabled=yes"
  with_items: "{{ misp_services }}"
  when: not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: Docker | Manually start services
  shell: "{{ item }}"
  with_items:
#    - /sbin/rngd -f
    - sudo -H -u mysql /usr/bin/mysql_install_db > /tmp/mysql_install_db.out 2>&1
    - cd /var/lib/mysql; /usr/bin/mysqld_safe --datadir='/var/lib/mysql' > /tmp/mysqld_safe.out 2>&1 &
    - /usr/sbin/httpd -DFOREGROUND > /tmp/httpd.out 2>&1 &
  ignore_errors: true
  when: (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: check installed pear packages
  command: pear list
  register: pearinstalled
  changed_when: false
- name: updated access to pear.php.net
  command: pear channel-update pear.php.net
  when: pearinstalled.stdout.find("Crypt_GPG") == -1
- name: install php pear dependencies
  pear: name={{item}} state=present
  with_items:
    - Crypt_GPG
    - Net_GeoIP

## https://github.com/ansible/ansible-modules-core/issues/2697
- name: install python dependencies with pip
#  pip: name="{{ item }}" extra_args='--no-input'
  pip: "name={{ item.n }} version={{ item.v }} extra_args='--exists-action=w'"
  with_items:
    - { n: redis, v: '2.10.5' }
#    - { n: pyzmq, v: '16.0.2' }
    - { n: 'git+https://github.com/MISP/PyMISP.git#egg=Package', v: "{{ misp_version }}" }

## TODO duplicate from misp-modules/requirements?
- name: install python dependencies with pip - python3
  pip: "name={{ item.n }} version={{ item.v }} extra_args='--exists-action=w' executable=pip3"
  with_items:
    - { n: redis, v: '2.10.5' }
#    - { n: pyzmq, v: '16.0.2' }
    - { n: 'git+https://github.com/MISP/PyMISP.git#egg=Package', v: "{{ misp_version }}" }
## required for users API
#  when: ansible_distribution_release == 'xenial'
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

- name: install python dependencies with pip - python, latest
  pip:
    name: "{{ item }}"
    extra_args: '--exists-action=w'
#    executable: pip3
  with_items:
    - git+https://github.com/kbandla/pydeep.git
    - python-magic
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

- include: redis-secure.yml

- name: Make Git work with proxies
  become: yes
  command: "git config --global http.proxy http://{{misp_proxy_user}}{{misp_proxy_pass}}@{{misp_proxy_host}}:{{misp_proxy_port}}"
  when: misp_proxy_host is defined

- stat: path={{ misp_rootdir }}/INSTALL
  register: m
- name: git clone MISP
  git:
    repo: https://github.com/MISP/MISP.git
    dest: "{{ misp_rootdir }}"
    version: "{{ misp_version }}"
    update: no
    force: no

## https://github.com/MISP/MISP/blob/e763e7646f7bbae5183ab93df840501d88c47119/INSTALL/UPDATE.txt
- name: updating existing MISP - minor releases
  command: "git pull origin {{ misp_version }} chdir={{ misp_rootdir }}"
#  command: "git pull origin {{ misp_version }} --verify-signatures chdir={{ misp_rootdir }}"
  when: m.stat.exists
  register: gitpull_result
  changed_when: not ("'Already up-to-date.' in gitpull_result.stdout")
- name: updating existing MISP submodules - minor releases
  command: "git submodule update --init --force chdir={{ misp_rootdir }}"
  when: gitpull_result.changed


## must be after git cloning MISP
- include: apache2.yml
  when: misp_webserver is not defined or misp_webserver == 'apache2'

## https://github.com/kosssi/ansible-role-gitconfig ?
- name: get git config
  command: "git config core.filemode chdir={{ misp_rootdir }}"
  changed_when: false
  register: gc
- name: setting core.filemode for git
  command: "git config core.filemode false chdir={{ misp_rootdir }}"
  when: gc.stdout != 'false'

- include: stix-cybox.yml

- include: composer.yml

### https://github.com/geerlingguy/ansible-role-php-pecl/blob/master/tasks/main.yml
### FIXME! pecl/redis requires PHP (version >= 7.0.0, version <= 7.1.0, excluded versions: 6.0.0)
#- name: Install PECL libaries.
#  shell: "yes \"\" | pecl install {{ item }}"
#  register: pecl_result
#  changed_when: "pecl_result.rc == 0"
#  failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"
#  with_items:
#    - redis
#  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: setup MISP Cake config
  copy:
    src: "{{ misp_rootdir }}/INSTALL/setup/config.php"
    dest: "{{ misp_rootdir }}/app/Plugin/CakeResque/Config/config.php"
    remote_src: true
    backup: yes

- name: validate permissions
  file: "dest={{ item.f }} mode={{ item.m }} owner={{ www_user }} group={{ www_user }} state=directory"
  with_items:
    - { f: "{{ misp_rootdir }}", m: '0755' }
    - { f: "{{ misp_rootdir }}/app/files", m: '2775' }
    - { f: "{{ misp_rootdir }}/app/files/scripts/tmp", m: '2775' }
    - { f: "{{ misp_rootdir }}/app/Plugin/CakeResque/tmp", m: '0775' }
    - { f: "{{ misp_rootdir }}/app/Config", m: '0750' }
    - { f: "{{ misp_rootdir }}/.gnupg", m: '0700' }
    - { f: "{{ misp_rootdir }}/app/webroot", m: '0700' }
- name: check owner/group for multiple MISP folders
  file: "dest={{ item }} owner={{ www_user }} group={{ www_user }} state=directory mode=2755"
#  with_fileglob:
#    - {{ misp_rootdir }}/app/files/scripts/tmp/*
#    - {{ misp_rootdir }}/app/files/scripts/tmp/cache/*
#    - {{ misp_rootdir }}/app/files/scripts/tmp/cached_exports/*
  with_items:
    - "{{ misp_rootdir }}/app/tmp/"
    - "{{ misp_rootdir }}/app/tmp/sessions"
    - "{{ misp_rootdir }}/app/tmp/cache"
    - "{{ misp_rootdir }}/app/tmp/cache/models"
    - "{{ misp_rootdir }}/app/tmp/cache/persistent"
    - "{{ misp_rootdir }}/app/tmp/cache/views"
    - "{{ misp_rootdir }}/app/tmp/tests"
    - "{{ misp_rootdir }}/app/tmp/logs"
    - "{{ misp_rootdir }}/app/tmp/files"
    - "{{ misp_rootdir }}/app/tmp/cached_exports"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/md5"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/suricata"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/text"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/snort"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/sha1"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/csv_sig"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/csv_all"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/xml"
    - "{{ misp_rootdir }}/app/tmp/cached_exports/rpz"
- stat: path="{{ misp_rootdir }}/app/tmp/debug.log"
  register: debuglog
- name: touch debug.log
  file: "dest={{ misp_rootdir }}/app/tmp/debug.log mode=0644 owner={{ www_user }} group={{ www_user }} state=touch"
  when: not debuglog.stat.exists

- include: mysql-configure.yml

- name: extra php settings
  template: "src=misp-php.ini.j2 dest={{ php_confdir }}/misp-php.{{ php_confext }} mode=0644"
  notify:
    - restart webserver
- name: Enforce Timezone in php.ini
  replace: "dest={{ php_ini }} regexp='^;date.timezone =' replace='date.timezone = {{ tz }}'"
  notify:
    - restart webserver
- name: enabling MISP php settings
  file: "src={{ php_confdir }}/misp-php.ini dest={{ php_confenable }}/99-misp.ini state=link"
  notify:
    - restart webserver
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and (misp_webserver is not defined or misp_webserver == 'apache2')

- stat: path={{ misp_rootdir }}/app/Config/bootstrap.php
  register: conffiles
- name: create config files from default
  copy:
    src: "{{ misp_rootdir }}/app/Config/{{ item }}.default.php"
    dest: "{{ misp_rootdir }}/app/Config/{{ item }}.php"
    owner: "{{ www_user }}"
    remote_src: true
  with_items:
    - bootstrap
    - database
    - core
## done later
#    - config
  when: not conffiles.stat.exists and (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
- name: create config files from default
  copy:
    src: "{{ misp_rootdir }}/app/Config/{{ item }}.default.php"
    dest: "{{ misp_rootdir }}/app/Config/{{ item }}.php"
    remote_src: true
  with_items:
    - bootstrap
    - database
    - core
#    - config
  when: not conffiles.stat.exists and not (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
- name: ensure right permissions for conf files
  file: "dest={{ misp_rootdir }}/app/Config/{{ item }}.php owner={{ www_user }} mode=0600"
  with_items:
    - bootstrap
    - database
    - core
#    - config

- name: update database settings
  replace: dest={{ misp_rootdir }}/app/Config/database.php regexp="{{ item.regexp }}" replace="{{ item.replace }}"
  with_items:
    - { regexp: 'db login', replace: "{{ misp_db_user }}" }
    - { regexp: 'db password', replace: "{{ misp_db_pass }}" }
  no_log: "{{ misp_no_log }}"
- name: set CakeResque bootstrap to true
  lineinfile: dest={{ misp_rootdir }}/app/Config/bootstrap.php line="CakePlugin::loadAll(array( 'CakeResque' => array('bootstrap' => true) ));"
- name: add vendor/autoload.php to core
  lineinfile: 'dest={{ misp_rootdir }}/app/Config/core.php line="{{ item }}"'
  with_items:
    - "require_once dirname(__DIR__) . '/Vendor/autoload.php';"

- name: Generating salt
  shell: "openssl rand -base64 32 | sed 's@[=\\/\\+]@@g;' | tee {{ misp_rootdir }}/.salt creates={{ misp_rootdir }}/.salt"
  register: salt1
  changed_when: false
  tags:
    - salt
- stat: path="{{ misp_rootdir }}/.salt"
  register: s
- name: Recover existing salt
  command: "cat {{ misp_rootdir }}/.salt"
  changed_when: false
  register: salt2
  when: s.stat.exists
- set_fact:
    salt: "{{ salt1.stdout }}"
  when: salt1.changed
- set_fact:
    salt: "{{ salt2.stdout }}"
  when: s.stat.exists

# FIXME! idempotence. MISP is rewriting this file regularly
- name: updating MISP config
  template:
    src: "{{ misp_config_php_template }}"
    dest: "{{ misp_rootdir }}/app/Config/config.php"
    mode: '0600'
    backup: yes
    owner: "{{ www_user }}"
  tags:
    - salt

- stat: "path={{ misp_rootdir }}/app/webroot/gpg.asc"
  register: gkey
- name: create gpg configuration template
  template: "src=gpg-template.j2 dest=/var/tmp/gpg-template owner={{ www_user }} mode=0600"
  when: not gkey.stat.exists
- name: redhat | start gpg-agent
  command: "gpg-agent --daemon --homedir={{ misp_rootdir }}/.gnupg"
  become: yes
  become_user: "{{ www_user }}"
  when: not gkey.stat.exists and (ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux') and misp_webserver == 'nginx'
  ignore_errors: true
- name: create gnupg key for {{ misp_email }}
  shell: "{{ item.s }} chdir={{ misp_rootdir }}/.gnupg creates={{ item.c }}"
  with_items:
    - { s: "gpg --homedir {{ misp_rootdir }}/.gnupg --gen-key --batch /var/tmp/gpg-template", c: "{{ gnupg_privdir }}/misp.sec" }
    - { s: "gpg --homedir {{ misp_rootdir }}/.gnupg --batch --import {{ misp_rootdir }}/.gnupg/misp.pub", c: "{{ misp_rootdir }}/app/webroot/gpg.asc" }
#    - { s: "gpg --homedir {{ misp_rootdir }}/.gnupg --batch --import {{ gnupg_privdir }}/misp.sec", c: "{{ misp_rootdir }}/app/webroot/gpg.asc" }
    - { s: "gpg --homedir {{ misp_rootdir }}/.gnupg --export --armor {{ misp_email }} --batch > {{ misp_rootdir }}/app/webroot/gpg.asc", c: "{{ misp_rootdir }}/app/webroot/gpg.asc" }
  become: yes
  become_user: "{{ www_user }}"
## FIXME! seems become_method/flags is not working in vagrant, ansible 2.5.0
  become_method: su
  become_flags: '-s /bin/sh'
## it seems to be done by gpg
#- command: wipe -q -y /var/tmp/gpg-template
#  when: not gkey.stat.exists
- name: check permissions of gpg files
  file: "dest={{ item.d }} mode={{ item.m }}"
  with_items:
    - { d: "{{ misp_rootdir }}/.gnupg/misp.pub", m: '0400' }
#    - { d: "{{ gnupg_privdir }}/misp.sec", m: '0400' }
    - { d: "{{ misp_rootdir }}/.gnupg/pubring.gpg", m: '0600' }
    - { d: "{{ misp_rootdir }}/.gnupg/secring.gpg", m: '0600' }
  when: not (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 18)

- name: validate worker start.sh permissions
  file: dest={{ misp_rootdir }}/app/Console/worker/start.sh mode=0755

- include: redhat-logrotate.yml
  when: ansible_os_family == "RedHat"

- include: selinux-context.yml
  when: ansible_os_family == "RedHat" and ansible_selinux.status is defined and ansible_selinux.status != 'disabled'

- block:
    - name: docker redis workaround ???
      replace: "dest=/etc/systemd/system/redis.service regexp={{ item.re }} replace={{ item.rep }} backup=yes"
      with_items:
        - { re: '^PrivateTmp=yes', rep: 'PrivateTmp=no' }
        - { re: '^PrivateDevices=yes', rep: 'PrivateDevices=no' }
#        - { re: '^', rep: '' }
  when: ansible_virtualization_type is defined and ansible_virtualization_type == "docker" and ansible_distribution == "Ubuntu" and ansible_distribution_release == 'xenial'
- name: ensure redis is active before launching worker
  service: name={{ redis_svc }} state=started
  when: not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: Docker | Manually start redis
  shell: "{{ item }}"
  with_items:
    - "sudo -H -u redis /usr/bin/redis-server {{ redis_conf }} --daemonize yes"
  ignore_errors: true
  when: (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")


- name: check if worker active
  command: "ps axu"
  register: ps
  changed_when: false
#- debug: var=ps.stdout_lines
- name: start MISP worker
  command: "bash {{ misp_rootdir }}/app/Console/worker/start.sh"
  become: yes
  become_user: "{{ www_user }}"
  when: ps.stdout.find("{{ misp_rootdir }}/app/Vendor/kamisama/php-resque-ex") == -1

- name: add MISP worker script for boot
  lineinfile:
    dest: /etc/rc.local
    line: "sudo -H -u {{ www_user }} bash {{ misp_rootdir }}/app/Console/worker/start.sh"
    insertbefore: "^exit 0"
    backup: yes
    create: yes

- include: misp-modules.yml

- include: lief.yml
  when: misp_lief_enable

- include: testing.yml
  when: misp_testing is defined and misp_testing

- include: misp-add-users.yml

- include: misp-feeds.yml

## or use tools/misp-backup/misp-backup.sh ?
- file: path={{ scriptsdir }} state=directory mode=0755
- name: add backup script
  template: src=backup-misp.sh.j2 dest={{ scriptsdir }}/backup-misp.sh mode=0755
- name: add restore script
  template: src=restore-misp.sh.j2 dest={{ scriptsdir }}/restore-misp.sh mode=0755
- name: setup cron backup
  cron: name="misp-backup" minute="30" hour="3" weekday="0"
    job="{{ scriptsdir }}/backup-misp.sh > /dev/null 2>&1"
    user=root
    cron_file=ansible_misp-backup

