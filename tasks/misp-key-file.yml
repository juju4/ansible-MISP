---

- name: Check if existing key file
  ansible.builtin.stat:
    path: "{{ misp_key_file }}"
  register: skey

# - debug: var=skey

- name: Key file
  when: not skey.stat.exists or skey.stat.size == 0
  block:
    - name: "Replace default MISP admin by {{ misp_web_user }}"
      ansible.builtin.replace:
        dest: "{{ d }}"
        regexp: 'admin@admin.test'
        replace: "{{ misp_web_user }}"
        mode: '0640'
        owner: "{{ www_user }}"
        group: "{{ www_user }}"
      loop:
        - "{{ misp_rootdir }}/app/Console/Command/Ls22Shell.php"
        - "{{ misp_rootdir }}/app/Model/User.php"
      loop_control:
        loop_var: d
      when: misp_web_user != 'admin@admin.test'
    - name: Check for Vendor/autoload.php
      ansible.builtin.command:
        cmd: "ls -la {{ misp_rootdir }}/app/Vendor/"
      changed_when: false
    - name: Generate key file - cake userInit
      ansible.builtin.shell: "{{ misp_rootdir }}/app/Console/cake userInit -q | tee {{ misp_key_file }}"
      args:
        creates: "{{ misp_key_file }}"
      become: yes
      become_user: "{{ www_user }}"
      register: userinit
      no_log: "{{ misp_no_log }}"
      failed_when: "'Error' in userinit.stderr"
      ignore_errors: true
    # - debug: var=userinit
    - name: Set fact userkey
      ansible.builtin.set_fact:
        userkey: "{{ userinit.stdout }}"
      no_log: "{{ misp_no_log }}"
- name: Existing key file
  when: skey.stat.exists
  block:
    - name: Get existing key file
      ansible.builtin.command: "cat {{ misp_key_file }}"
      changed_when: false
      register: userinit2
      no_log: "{{ misp_no_log }}"
    - name: Set fact userkey
      ansible.builtin.set_fact:
        userkey: "{{ userinit2.stdout }}"

# - debug: var=userkey

## FIXME! fail if returns 'Script aborted: MISP instance already initialised.'
- name: Check no script error
  ansible.builtin.fail:
    msg: "Fatal! error retrieving user key"
  when: "'Script aborted: MISP instance already initialised.' in userkey or not userkey"
